#!/usr/bin/env bash

# jackd must be started.
# with homebrew: brew services start jack

# NOTE: listyml whose path includes space character will cause error.

msg() { printf "\033[1;34m%s\033[0m\n" "$1"; }
err() { printf "\033[1;31m%s\033[0m\n" "$1" 1>&2; return 1; }
required() { type "$1" > /dev/null 2>&1 || err "'$1' is not installed"; }

YTMOC_DIR="${YTMOC_DIR:-~/.ytmoc}"
YTMOC_MP3_DIR="${YTMOC_MP3_DIR:-$YTMOC_DIR/mp3}"
YTMOC_DEFAULT_LIST="${YTMOC_DEFAULT_LIST:-main}"
YTMOC_MOCOPT=${YTMOC_MOCOPT:-}
mocp="exec mocp $YTMOC_MOCOPT"
mocdir=""
for mocopt in $YTMOC_MOCOPT; do
  case $mocopt in
    -M | --moc-dir ) mocdir="!";;
    * ) [ "$mocdir" = "!" ] && mocdir="$mocopt";;
  esac
done
if [ -n "$mocdir" ] && ! [ -d "$mocdir" ]; then
  err "MOC dir $mocdir not found" || exit 1
fi

_ytmoc_validate_listname() {
  listname=$1
  listyml=$YTMOC_DIR/$listname.yml
  [ -f "$listyml" ] || err "$listyml not found"
}

for deps in yq yt-dlp jackd mocp; do
  required "$deps" || exit 1
done

_ytmoc_sync() {
  targetListYMLs=""

  case "$#" in
    0 ) targetListYMLs="$YTMOC_DIR/*.yml";;
    * ) for listname; do
      _ytmoc_validate_listname "$listname" || exit 1
      targetListYMLs="$targetListYMLs $YTMOC_DIR/$listname.yml"
    done;;
  esac

  # shellcheck disable=SC2016,SC2086
  mergedTargetListYML=$(yq ea '. as $item ireduce ({}; . * $item )' $targetListYMLs)
  targetIDs=$(echo "$mergedTargetListYML" | yq ea '(keys)[]')

  mkdir -p "$YTMOC_MP3_DIR"
  while read -r id; do
    if [ -f "$YTMOC_MP3_DIR/$id.mp3" ]; then continue; fi
    msg "Downloading '$(echo "$mergedTargetListYML" | yq ".$id")' ($id)..."
    yt-dlp -o "$YTMOC_MP3_DIR/$id" -x --audio-format mp3 "$id"
  done < <(echo "$targetIDs")

  for listyml in $targetListYMLs; do
    listdir="${listyml%.yml}"
    mkdir -p "$listdir"

    count=0
    while read -r id; do
      ((count++))
      title=$(printf "%03d" "$count").$(yq ".$id" "$listyml")
      ln -sf "$YTMOC_MP3_DIR/$id.mp3" "$listdir/$title.mp3"
    done < <(yq '(keys)[]' "$listyml")

    ((count++))
    find "$listdir/"*.mp3 -print0 | sort | tail -n "+$count" | xargs -0 -I{} rm "{}"
  done

  # 削除したリストに対応するディレクトリを削除
  if [ "$#" -eq "0" ]; then
    notpaths="-not -path */.* -not -path $YTMOC_DIR -not -path $YTMOC_MP3_DIR"
    for listyml in $targetListYMLs; do
      notpaths="$notpaths -not -path ${listyml%.yml}"
    done
    # shellcheck disable=SC2086
    find "$YTMOC_DIR" -type d $notpaths -print0 | xargs -0 -I{} rm -rf "{}"
  fi

  # どのリストにも含まれない mp3 実体削除
  # shellcheck disable=SC2016
  comm -13 \
    <(yq ea '. as $item ireduce ({}; . * $item ) | (keys)[]' "$YTMOC_DIR"/*.yml | sort) \
    <(find "$YTMOC_MP3_DIR"/*.mp3 -print0 | xargs -0 -I{} basename "{}" .mp3 | sort) |
    xargs -I{} rm "$YTMOC_MP3_DIR/{}.mp3"
}

_ytmoc_open() {
  listname=$1
  if [ -n "$listname" ]; then
    _ytmoc_validate_listname "$listname" || exit 1
    $mocp "$YTMOC_DIR/$listname"
    return
  fi

  lastlog=$mocdir/last_directory
  if [ -f "$lastlog" ]; then
    lastdir="$(cat "$lastlog")"
    if [ "$(dirname "$lastdir")" = "$YTMOC_DIR" ] &&
        [ -d "$lastdir" ]; then
      $mocp
      return
    fi
  fi
  if [ -d "$YTMOC_DIR/$YTMOC_DEFAULT_LIST" ]; then
    $mocp "$YTMOC_DIR/$YTMOC_DEFAULT_LIST"
    return
  fi
  err "Both last opened dir and default playlist dir not found."
}

_ytmoc_toggle() {
  $mocp --toggle-pause
}

case "$1" in
  "" | o | open ) shift; _ytmoc_open "$@";;
  t | toggle ) _ytmoc_toggle;;
  sync )
    cmd=$1
    shift;
    "_ytmoc_$cmd" "$@"
  ;;
  * )
    err "invalid command: '$1'"
    exit
esac
